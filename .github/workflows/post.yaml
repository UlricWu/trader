name: Post-Merge Tasks

on:
  push:
    branches:
      - 'dev'
#  pull_request:
#    branches:
#      - 'master'
#      - 'dev'
jobs:
#  auto-merge-dev-to-master:
#    name: Auto Merge dev → master
#    runs-on: ubuntu-latest
#    #    needs: test
#    if: github.event_name == 'push' && startsWith(github.ref, 'refs/heads/dev')  # Only on push to dev
#    steps:
#      - name: Checkout repo
#        uses: actions/checkout@v4
#        with:
#          fetch-depth: 0
#      - name: Fetch master
#        run: git fetch origin master:master
#      - name: Checkout dev
#        run: git checkout dev
#
#      - name: Create Pull Request
#        uses: peter-evans/create-pull-request@v6
#        with:
#          token: ${{ secrets.PAT_TOKEN }}
#          branch: auto-merge-dev-to-master
#          title: 'Automated merge from dev to master'
#          body: 'This PR was automatically created by GitHub Actions.'
#
#      - name: Create PR
#        run: |
#          gh pr create \
#            --base master \
#            --head dev \
#            --title "Auto merge dev to master" \
#            --body "Automated merge from dev to master"
#        env:
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#
#      - name: Merge PR
#        run: gh pr merge --merge --auto
#        env:
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  #      - name: Checkout code
#        uses: actions/checkout@v3
#
#      - name: Checkout full repo
#        uses: actions/checkout@v4
#        with:
#          fetch-depth: 0   # Important: fetch all history and branches
#
#      - name: Configure Git for GitHub Actions
#        run: |
#          git config --global user.name 'github-actions[bot]'
#          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
#
#      - name: Fetch master branch
#        run: git fetch origin master:master
#
#      - name: Checkout master
#        run: git checkout master
#
#      - name: Merge dev into master
#        run: git merge origin/dev -X theirs --no-edit --allow-unrelated-histories --no-ff --commit -m "Auto-merge dev into master"
#
#      - name: Merge dev into master
#        run: |
#
#          git push origin master
#        env:
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  create-pr:
    name: Create PR dev → master
    runs-on: ubuntu-latest
#    needs: test
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/heads/dev')  # Only on push to dev
    outputs:
      pr_number: ${{ steps.cpr.outputs.pull-request-number }}
      pr_url: ${{ steps.cpr.outputs.pull-request-url }}

    steps:
      - uses: actions/checkout@v3
        with:
          ref: dev

      - id: cpr
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          base: master
          branch: dev
          title: 'Auto PR: dev → master'
          body: Auto-PR to merge dev into master
          delete-branch: false

  auto-merge:
    name: Enable Auto-Merge (safe)
    runs-on: ubuntu-latest
    needs: create-pr

    steps:
      - name: Check if PR was created
        id: get_pr
        run: |
          PR_URL="${{ needs.create-pr.outputs.pr_url }}"
          if [ -z "$PR_URL" ]; then
            echo "No PR created (dev and master already in sync). Skipping."
            echo "skip=true" >> $GITHUB_OUTPUT
          else
            echo "PR_URL=$PR_URL"
            echo "pr_url=$PR_URL" >> $GITHUB_OUTPUT
            echo "skip=false" >> $GITHUB_OUTPUT
          fi

      - name: Enable Auto-Merge via gh api
        if: steps.get_pr.outputs.skip == 'false'
        run: |
          PR_ID=$(gh pr view ${{ steps.get_pr.outputs.pr_url }} --json id,state -q '.id')
          PR_STATE=$(gh pr view ${{ steps.get_pr.outputs.pr_url }} --json state -q '.state')
          echo "PR_STATE=$PR_STATE"

          if [ "$PR_STATE" = "OPEN" ]; then
            echo "Enabling auto-merge..."
            gh api graphql -f query='
              mutation($prId: ID!) {
                enablePullRequestAutoMerge(input: { pullRequestId: $prId, mergeMethod: SQUASH }) {
                  pullRequest { number }
                }
              }' -f prId=$PR_ID
          else
            echo "PR is not open. Skipping auto-merge."
          fi
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

#    outputs:
#      pr_number: ${{ steps.cpr.outputs.pull-request-number }}
#      pr_url: ${{ steps.cpr.outputs.pull-request-url }}
#
#    steps:
#      - uses: actions/checkout@v3
#        with:
#          ref: dev
#      - name: Checkout repo
#        uses: actions/checkout@v4
#        with:
#          fetch-depth: 0
#
#      - name: Configure Git for GitHub Actions
#        run: |
#          git config --global user.name 'github-actions[bot]'
#          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
#
#      - id: cpr
#        uses: peter-evans/create-pull-request@v6
#        with:
#          token: ${{ secrets.PAT_TOKEN }}  # Use PAT here
#          base: master
#          branch: dev
#          title: 'Auto PR: dev → master'
#          body: Auto-generated PR to merge dev into master
#          delete-branch: false

  wait-auto-merge:
    name: Wait for PR to merge
    runs-on: ubuntu-latest
    needs: auto-merge
    steps:
      - name: Wait 30 seconds
        run: sleep 30

  release:
    name: Release on master
    runs-on: ubuntu-latest
    needs: wait-auto-merge
    steps:
      - uses: actions/checkout@v3

      - id: date
        run: echo "date=$(TZ=Asia/Taipei date +'%Y-%m-%d-%H%M-%Z')" >> $GITHUB_OUTPUT


      - uses: softprops/action-gh-release@v1
        with:
          tag_name: release-${{ steps.date.outputs.date }}
          name: Release ${{ steps.date.outputs.date }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  sync:
    name: Sync master → dev
    runs-on: ubuntu-latest
    needs: release

    steps:
      - uses: actions/checkout@v3
        with:
          ref: master

      - run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          git fetch origin dev
          git checkout dev
          git merge origin/master --no-ff --no-edit --allow-unrelated-histories
          git push origin dev
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}