name: CI/CD Pipeline

on:
  push:
    branches:
      - dev
      - master
      - dev-*
  pull_request:
    branches:
      - dev
      - master

jobs:
  test:
    name: Run Pytest
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.11

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run Pytest
        run: pytest

  merge-to-master:
    name: Merge dev into master
    needs: test
    if: github.event_name == 'pull_request' && github.base_ref == 'dev' && github.event.pull_request.merged == true
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          ref: dev

      - name: Set up Git user
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Merge dev into master
        run: |
          git fetch origin master
          git checkout master
          git merge --no-ff origin/dev -m "Auto-merge dev into master after PR"
          git push origin master

  release:
    name: Release job after master merge
    needs: merge-to-master
    runs-on: ubuntu-latest

    steps:
      - name: Checkout master
        uses: actions/checkout@v3
        with:
          ref: master

      - name: Release steps (example)
        run: |
          echo "Release logic here, e.g., package, deploy, notify..."
          # Example: create a tag
          VERSION=$(date +'%Y.%m.%d-%H%M')
          git tag "v$VERSION"
          git push origin "v$VERSION"

  sync-dev:
    name: Sync master into dev
    needs: release
    runs-on: ubuntu-latest

    steps:
      - name: Checkout master
        uses: actions/checkout@v3
        with:
          ref: master

      - name: Set up Git user
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Merge master into dev
        run: |
          git fetch origin dev
          git checkout dev
          git merge --no-ff origin/master -m "Sync master into dev after release"
          git push origin dev
