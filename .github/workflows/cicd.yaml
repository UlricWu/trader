name: CI/CD Pipeline

on:
  push:
    branches:
      - dev
      - dev-*


jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.11

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run Pytest
        run: pytest

#  create-pr:
#    name: Create PR dev → master
#    runs-on: ubuntu-latest
#    needs: test
#    if: github.ref == 'refs/heads/dev'
#    outputs:
#      pr_number: ${{ steps.cpr.outputs.pull-request-number }}
#      pr_url: ${{ steps.cpr.outputs.pull-request-url }}
#
#    steps:
#      - uses: actions/checkout@v3
#        with:
#          ref: dev
#
#      - id: cpr
#        uses: peter-evans/create-pull-request@v5
#        with:
#          token: ${{ secrets.GITHUB_TOKEN }}
#          base: master
#          branch: dev
#          title: 'Auto PR: dev → master'
#          body: Auto-PR to merge dev into master
#          delete-branch: false

#  auto-merge:
#    name: Enable Auto-Merge (safe)
#    runs-on: ubuntu-latest
#    needs: create-pr
#
#    steps:
#      - name: Check if PR was created
#        id: get_pr
#        run: |
#          PR_URL="${{ needs.create-pr.outputs.pr_url }}"
#          if [ -z "$PR_URL" ]; then
#            echo "No PR created (dev and master already in sync). Skipping."
#            echo "skip=true" >> $GITHUB_OUTPUT
#          else
#            echo "PR_URL=$PR_URL"
#            echo "pr_url=$PR_URL" >> $GITHUB_OUTPUT
#            echo "skip=false" >> $GITHUB_OUTPUT
#          fi
#
#      - name: Enable Auto-Merge via gh api
#        if: steps.get_pr.outputs.skip == 'false'
#        run: |
#          PR_ID=$(gh pr view ${{ steps.get_pr.outputs.pr_url }} --json id,state -q '.id')
#          PR_STATE=$(gh pr view ${{ steps.get_pr.outputs.pr_url }} --json state -q '.state')
#          echo "PR_STATE=$PR_STATE"
#
#          if [ "$PR_STATE" = "OPEN" ]; then
#            echo "Enabling auto-merge..."
#            gh api graphql -f query='
#              mutation($prId: ID!) {
#                enablePullRequestAutoMerge(input: { pullRequestId: $prId, mergeMethod: SQUASH }) {
#                  pullRequest { number }
#                }
#              }' -f prId=$PR_ID
#          else
#            echo "PR is not open. Skipping auto-merge."
#          fi
#        env:
#          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#
#
#
#
#  release:
#    name: Create Release Tag
#    needs: auto-merge
#    runs-on: ubuntu-latest
#
#    steps:
#      - name: Checkout master
#        uses: actions/checkout@v3
#        with:
#          ref: master
#
#      - name: Set up Git user
#        run: |
#          git config user.name "github-actions[bot]"
#          git config user.email "github-actions[bot]@users.noreply.github.com"
#
#
#      - name: Create Release Tag
#        run: |
#          DATE=$(date +'%Y-%m-%d-%H%M%S')
#          TAG="release-${DATE}"
#          git tag "$TAG"
#          git push origin "$TAG"
#
#  sync-dev:
#    name: Sync master into dev
#    needs: release
#    runs-on: ubuntu-latest
#
#    steps:
#      - name: Checkout master
#        uses: actions/checkout@v3
#        with:
#          ref: master
#
#      - name: Set up Git user
#        run: |
#          git config user.name "github-actions[bot]"
#          git config user.email "github-actions[bot]@users.noreply.github.com"
#
#      - name: Merge master into dev
#        run: |
#          git fetch origin dev
#          git checkout dev
#          git merge --no-ff origin/master -m "Sync master into dev after release" --allow-unrelated-histories
#          git push origin dev
